#!/usr/bin/env bash
# Copyright 1999-2024 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2
# Author: Karl Trygve Kalleberg <karltk@gentoo.org>
# Rewritten from the old, Perl-based emerge-webrsync script
# Author: Alon Bar-Lev <alon.barlev@gmail.com>
# Major rewrite from Karl's scripts.

# TODO:
#  - add support for ROOT

# repos.conf configuration for use with emerge --sync and emaint sync
# using keyring from app-crypt/openpgp-keys-gentoo-release:
# [gentoo]
# sync-type = webrsync
# sync-webrsync-verify-signature = true
# sync-openpgp-key-path = /usr/share/openpgp-keys/gentoo-release.asc
#
# Alternative (legacy) PORTAGE_GPG_DIR configuration:
# gpg key import
# KEY_ID=0x96D8BF6D
# gpg --homedir /etc/portage/gnupg --keyserver subkeys.pgp.net --recv-keys ${KEY_ID}
# gpg --homedir /etc/portage/gnupg --edit-key ${KEY_ID} trust
#

main() {
	local arg v

	for arg in "$@" ; do
		v=${arg#*=}
		case ${arg} in
			-h|--help)    usage ;;
			-k|--keep)    opt[keep]=1 ;;
			-q|--quiet)   opt[quiet]=1 ;;
			-v|--verbose) opt[quiet]=0 ;;
			-x|--debug)   opt[debug]=1 ;;
			--revert=*)   opt[revert]=${v} ;;
			--no-pgp-verify) opt[no-pgp-verify]=1 ;;
			*)            usage "Invalid option '${arg}'" ;;
		esac
	done

	if (( opt[quiet] )); then
		einfo() { :; }
	fi

	handle_pgp_setup

	mkdir -p "${repo_location}" || exit
	if contains_word usersync "${FEATURES}"; then
		chown "${PORTAGE_USERNAME}":"${PORTAGE_GRPNAME}" "${repo_location}" || exit
	fi

	if [[ ! -w ${repo_location} ]] ; then
		die "Repository '${repo_name}' is not writable: ${repo_location}"
	fi

	mkdir -p "${PORTAGE_TMPDIR}/portage"

	# Create a temporary directory whose subsequent removal is guaranteed.
	tmpdir=
	trap 'rm -rf -- "${tmpdir}"' EXIT
	tmpdir=$(mktemp -d -- "${PORTAGE_TMPDIR}/portage/webrsync.XXXXXX") \
	&& cd -- "${tmpdir}" \
	|| exit

	(( opt[keep] )) || DISTDIR=${tmpdir}
	mkdir -p "${DISTDIR}"

	if (( opt[keep] )) && [[ ! -w ${DISTDIR} ]] ; then
		die "DISTDIR is not writable: ${DISTDIR}"
	fi

	# This is a sanity check to help prevent people like funtoo users
	# from accidentally wiping out their git tree.
	if [[ ${repo_sync_type} != @(''|rsync|webrsync) ]]; then
		eerror "Invalid sync-type attribute for ${repo_name@Q} repo: ${repo_sync_type@Q} (expected 'rsync' or 'webrsync')"
		die "repos.conf validation failed"
	fi

	(( opt[debug] )) && set -x

	if [[ -v 'opt[revert]' ]]; then
		emaint revisions --purgerepos="${repo_name}"
		do_snapshot 1 "${opt[revert]}"
	else
		do_latest_snapshot
	fi
}

usage() {
	cat <<-EOF
	Usage: $0 [options]

	Options:
	  --revert=yyyymmdd   Revert to snapshot
	  --no-pgp-verify     Disable PGP verification of snapshot
	  -k, --keep          Keep snapshots in DISTDIR (don't delete)
	  -q, --quiet         Only output errors
	  -v, --verbose       Enable verbose output (no-op)
	  -x, --debug         Enable debug output
	  -h, --help          This help screen (duh!)
	EOF
	if [[ -n $* ]] ; then
		printf "\nError: %s\n" "$*" 1>&2
		exit 1
	else
		exit 0
	fi
}

handle_pgp_setup() {
	if (( opt[no-pgp-verify] )); then
		# Disable PGP verification. The webrsync module specifies this
		# option if the "sync-webrsync-verify-signature" repo attribute
		# is explicitly defined with a value of "false".
		WEBRSYNC_VERIFY_SIGNATURE=0
	elif contains_word webrsync-gpg "${FEATURES}"; then
		# Discourage the use of the deprecated "webrsync-gpg" feature
		# because it prevents the use of gemato for verification.
		ewarn "FEATURES=webrsync-gpg is deprecated, see the make.conf(5) man page."
		WEBRSYNC_VERIFY_SIGNATURE=2
	else
		# Try to use gemato for PGP verification. If missing, fall
		# back to conventional verification with gpg(1). The former
		# approach is preferred because it handles key refresh and
		# revocation, and guarantees a clean operating environment.
		WEBRSYNC_VERIFY_SIGNATURE=1
	fi

	case "${WEBRSYNC_VERIFY_SIGNATURE}" in
		0)
			if (( ! opt[quiet] )); then
				ewarn "PGP verification method: disabled"
			fi
			;;
		1)
			einfo "PGP verification method: gemato"
			;;
		2)
			ewarn "PGP verification method: legacy gpg path"
			;;
	esac

	if [[ -n ${PORTAGE_TEMP_GPG_DIR} ]]; then
		PORTAGE_GPG_DIR=${PORTAGE_TEMP_GPG_DIR}
	fi

	if [[ ${WEBRSYNC_VERIFY_SIGNATURE} == 2 && -z "${PORTAGE_GPG_DIR}" ]]; then
		die "Please set PORTAGE_GPG_DIR in make.conf!"
	fi
}

do_tar() {
	local -

	shopt -o -s pipefail
	case $1 in
		*.xz)   xzcat "$1" ;;
		*.bz2)  bzcat "$1" ;;
		*.gz)   zcat  "$1" ;;
		*)      cat   "$1" ;;
	esac | {
		shift
		tar "$@"
	}
}

get_unixtime_by_date() {
	local date=$1

	if [[ ${USERLAND} == BSD ]] ; then
		# Specify zeros for the least significant digits, or else those
		# digits are inherited from the current system clock time.
		date -juf "%Y%m%d%H%M.%S" "${date}0000.00" +"%s"
	else
		date -d "${date:0:4}-${date:4:2}-${date:6:2}" -u +"%s"
	fi
}

get_repository_timestamp() {
	local portage_current_timestamp=0

	if [[ -f "${repo_location}/metadata/timestamp.x" ]]; then
		portage_current_timestamp=$(cut -f 1 -d " " "${repo_location}/metadata/timestamp.x" )
	fi

	echo "${portage_current_timestamp}"
}

fetch_file() {
	# shellcheck disable=2034
	local URI=$1 FILE=$2
	local opts

	case ${FETCHCOMMAND} in
		*wget*)
			opts="--continue"
			if (( opt[quiet] )); then
				opts+=" -q"
			fi
			;;
		*curl*)
			opts="--continue-at -f -S"
			if (( opt[quiet] )); then
				opts+=" -s"
			fi
			;;
		*)
			rm -f "${DISTDIR}/${FILE}"
	esac

	einfo "Fetching file ${FILE} ..."

	# Already set DISTDIR=
	eval "${FETCHCOMMAND} ${opts}"

	if [[ $? -eq 0 && -s ${DISTDIR}/${FILE} ]] ; then
		return 0
	else
		rm -f "${DISTDIR}/${FILE}"
		return 1
	fi
}

check_file_digest() {
	local digest=$1 file=$2
	local digest_content md5sum_output

	einfo "Checking digest ..."

	if type -P md5sum > /dev/null; then
		md5sum_output=$(md5sum "${file}")
		digest_content=$(< "${digest}")
		[[ "${md5sum_output%%[[:space:]]*}" = "${digest_content%%[[:space:]]*}" ]]
	elif type -P md5 > /dev/null; then
		[[ "$(md5 -q "${file}")" == "$(cut -d ' ' -f 1 "${digest}")" ]]
	else
		die "cannot check digest: no suitable md5/md5sum binaries found"
	fi
}

check_file_signature_gemato() {
	local signature=$1 file=$2
	local -a gemato_args
	local key

	if ! type -P gemato > /dev/null; then
		return 127
	else
		if [[ -n ${PORTAGE_GPG_KEY} ]] ; then
			key="${PORTAGE_GPG_KEY}"
		else
			key="${EPREFIX}/usr/share/openpgp-keys/gentoo-release.asc"
		fi

		if [[ ! -f "${key}" ]] ; then
			eerror "${key} not available. Is sec-keys/openpgp-keys-gentoo-release installed?"
			die "Needed keys unavailable! Install its package or set PORTAGE_GPG_KEY to the right path."
		fi

		gemato_args=(
			openpgp-verify-detached
			-K "${key}"
		)

		if [[ -n ${http_proxy} || -n ${https_proxy} ]] ; then
			gemato_args+=(
				--proxy "${http_proxy:-${https_proxy}}"
			)
		fi

		[[ -n ${PORTAGE_GPG_KEY_SERVER} ]] && gemato_args+=( --keyserver "${PORTAGE_GPG_KEY_SERVER}" )
		(( opt[quiet] )) && gemato_args+=( --quiet )
		(( opt[debug] )) && gemato_args+=( --debug )

		gemato "${gemato_args[@]}" -- "${signature}" "${file}"
	fi
}

check_file_signature_gpg() {
	local signature=$1 file=$2
	local fingerprint key
	local -x GNUPGHOME

	if [[ -n ${PORTAGE_GPG_KEY} ]] ; then
		key="${PORTAGE_GPG_KEY}"
	else
		key="${EPREFIX}/usr/share/openpgp-keys/gentoo-release.asc"
	fi

	if [[ ! -f "${key}" ]] ; then
		eerror "${key} not available. Is sec-keys/openpgp-keys-gentoo-release installed?"
		die "Needed keys unavailable! Install its package or set PORTAGE_GPG_KEY to the right path."
	fi

	if [[ ! ${GNUPGHOME=${PORTAGE_GPG_DIR}} ]]; then
		# The PORTAGE_GPG_DIR variable is either unset or
		# empty. Create a temporary directory to contain an
		# ephemeral keyring into which Gentoo's distributed
		# public key block shall be imported.
		GNUPGHOME=$(mktemp -d -- "${PORTAGE_TMPDIR}/portage/webrsync.XXXXXX") \
		&& gpg --batch --import "${key}" \
		&& fingerprint=$(gpg_fingerprint '<infrastructure@gentoo.org>') \
		&& gpg --batch --import-ownertrust <<<"${fingerprint}:6:" \
		|| exit
	elif [[ ! -w ${GNUPGHOME} ]]; then
		die "gpgdir is not writable: ${GNUPGHOME}"
	fi

	gpg_verify "${signature}" "${file}"
}

gpg_fingerprint() {
	local -a fields

	# https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob_plain;f=doc/DETAILS
	while IFS=: read -ra fields; do
		[[ ${fields[0]} == fpr && ${fields[9]} =~ ^[[:xdigit:]]{40}$ ]] \
		&& printf '%s\n' "${fields[9]}" \
		&& return
	done < <(gpg --with-colons --list-keys "$@")
}

gpg_verify() {
	local signature=$1 file=$2
	local output token

	# https://www.gnupg.org/documentation/manuals/gnupg/Automated-signature-checking.html
	output=$(gpg --batch --status-fd 1 --verify "${signature}" "${file}") || return
	for token in GOODSIG VALIDSIG TRUST_ULTIMATE; do
		[[ $'\n'${output} == *$'\n[GNUPG:] '"${token} "* ]] || return
	done
}

check_file_signature() {
	local signature=$1 file=$2
	local r

	case ${WEBRSYNC_VERIFY_SIGNATURE} in
		[12])
			einfo "Checking signature ..."
			;;&
		1)
			check_file_signature_gemato "${signature}" "${file}"
			if (( ${r=$?} == 127 )); then
				ewarn "Falling back to gpg as gemato is not installed"
				check_file_signature_gpg "${signature}" "${file}"
				r=$?
			fi
			;;
		2)
			check_file_signature_gpg "${signature}" "${file}"
	esac

	if (( ${r=$?} != 0 )); then
		# Exit early since it's typically inappropriate to try other
		# mirrors in this case (it may indicate a keyring problem).
		file=${file##*/}
		die "signature verification failed for ${file@Q}"
	fi
}

get_snapshot_timestamp() {
	local file=$1

	do_tar "${file}" --to-stdout -f - --wildcards -x '*/metadata/timestamp.x' | cut -f 1 -d " "
}

sync_local() {
	local file=$1
	local ownership post_sync
	local -a tarsync_opts rsync_opts

	einfo "Syncing local repository ..."

	if ! contains_word usersync "${FEATURES}"; then
		ownership="${PORTAGE_USERNAME}:${PORTAGE_GRPNAME}"
	elif [[ ${USERLAND} == BSD ]]; then
		ownership=$(stat -f '%Su:%Sg' "${repo_location}")
	else
		ownership=$(stat -c '%U:%G' "${repo_location}")
	fi || exit

	if type -P tarsync > /dev/null ; then
		tarsync_opts=( -s 1 -e /distfiles -e /packages -e /local )
		if chown "${ownership}" "${repo_location}" 2>/dev/null; then
			tarsync_opts+=( -o "${ownership%:*}" -g "${ownership#*:}" )
		fi
		if (( ! opt[quiet] )); then
			tarsync_opts+=( -v )
		fi
		if ! tarsync "${tarsync_opts[@]}" "${file}" "${repo_location}"; then
			eerror "tarsync failed; tarball is corrupt? (${file})"
			return 1
		fi
	else
		if ! do_tar "${file}" -x --strip-components=1 -f -; then
			eerror "tar failed to extract the image. tarball is corrupt? (${file})"
			return 1
		fi

		# Free disk space
		(( opt[keep] )) || rm -f "${file}"

		read -rd '' -a rsync_opts <<<"${PORTAGE_RSYNC_OPTS} ${PORTAGE_RSYNC_EXTRA_OPTS}"
		if (( opt[quiet] )); then
			rsync_opts+=( -q )
		fi
		if chown "${ownership}" . 2>/dev/null; then
			chown -R "${ownership}" .
			rsync_opts+=( --owner --group )
		fi

		chmod 755 .
		rsync "${rsync_opts[@]}" . "${repo_location%%/}" || {
			eerror "rsync failed: $?"
			die "Aborting because of rsync failure"
		}

		einfo "Cleaning up ..."
	fi

	if contains_word metadata-transfer "${FEATURES}"; then
		einfo "Updating cache ..."
		"${emerge}" --metadata
	fi

	post_sync=${PORTAGE_CONFIGROOT%/}/etc/portage/bin/post_sync
	[[ -x "${post_sync}" ]] && "${post_sync}"

	# --quiet suppresses output if there are no relevant news items
	if contains_word news "${FEATURES}"; then
		"${emerge}" --check-news --quiet
	fi
	return 0
}

do_snapshot() {
	local ignore_timestamp=$1 date=$2
	local snapshot_timestamp have_files signature unixtime digest mirror file
	local -A suffix_by
	local -a tarballs

	suffix_by=([xzcat]=xz [bzcat]=bz2 [zcat]=gz)

	for file in xzcat bzcat zcat; do
		if type -P "${file}"; then
			tarballs+=( {"$repo_name","portage"}-"${date}.tar.${suffix_by[$file]}" )
		fi
	done >/dev/null

	if (( ! ${#tarballs[@]} )); then
		die "unable to locate any decompressors (xzcat, bzcat or zcat)"
	fi

	for mirror in ${GENTOO_MIRRORS} ; do
		mirror=${mirror%/}
		einfo "Trying to retrieve ${date} snapshot from ${mirror} ..."
		for file in "${tarballs[@]}"; do
			digest="${file}.md5sum"
			signature="${file}.gpgsig"

			if [[ -s "${DISTDIR}/${file}" && -s "${DISTDIR}/${digest}" && -s "${DISTDIR}/${signature}" ]] ; then
				check_file_digest "${DISTDIR}/${digest}" "${DISTDIR}/${file}" \
				&& check_file_signature "${DISTDIR}/${signature}" "${DISTDIR}/${file}" \
				&& have_files=1
			fi

			if (( ! have_files )); then
				fetch_file "${mirror}/snapshots/${digest}" "${digest}" \
				&& fetch_file "${mirror}/snapshots/${signature}" "${signature}" \
				&& fetch_file "${mirror}/snapshots/${file}" "${file}" \
				&& check_file_digest "${DISTDIR}/${digest}" "${DISTDIR}/${file}" \
				&& check_file_signature "${DISTDIR}/${signature}" "${DISTDIR}/${file}" \
				&& have_files=1
			fi

			#
			# If timestamp is invalid
			# we want to try and retrieve
			# from a different mirror
			#
			if (( have_files )); then
				einfo "Getting snapshot timestamp ..."

				snapshot_timestamp=$(get_snapshot_timestamp "${DISTDIR}/${file}")

				if [[ ${ignore_timestamp} == 0 ]]; then
					if (( snapshot_timestamp < $(get_repository_timestamp) )); then
						ewarn "Repository (age) is newer than fetched snapshot"
						have_files=0
					fi
				else
					unixtime=$(get_unixtime_by_date "${date}")

					# Check that this snapshot is what the age it claims to be
					if (( snapshot_timestamp < unixtime
						|| snapshot_timestamp > unixtime + 2 * 86400 ))
					then
						ewarn "Snapshot timestamp is not within acceptable period!"
						have_files=0
					fi
				fi
			fi

			if (( have_files )); then
				break 2
			else
				# Remove files and use a different mirror
				rm -f "${DISTDIR}"/{"$file","$digest","$signature"}
			fi
		done
	done

	if (( have_files )); then
		sync_local "${DISTDIR}/${file}" \
		&& { (( opt[keep] )) || rm -f "${DISTDIR}"/{"$file","$digest","$signature"}; }
	else
		ewarn "${date} snapshot was not found"
		false
	fi
}

do_latest_snapshot() {
	local timestamp_{difference,problem} snapshot_{date,unixtime} approx_snapshot_time existing_timestamp start_{hour,time}
	local min_time_diff attempts TZ=UTC

	einfo "Fetching most recent snapshot ..."

	# The snapshot for a given day is generated at 00:45 UTC on the following
	# day, so the current day's snapshot (going by UTC time) hasn't been
	# generated yet.  Therefore, always start by looking for the previous day's
	# snapshot (for attempts=1, subtract 1 day from the current UTC time).

	# Timestamps that differ by less than 2 hours
	# are considered to be approximately equal.
	min_time_diff=$(( 2 * 60 * 60 ))

	existing_timestamp=$(get_repository_timestamp)
	printf -v start_time '%(%s)T'
	printf -v start_hour '%(%H)T' "${start_time}"

	# Daily snapshots are created at 00:45 and are not
	# available until after 01:00. Don't waste time trying
	# to fetch a snapshot before it's been created.
	if (( ${start_hour#0} < 1 )); then
		(( start_time -= 86400 ))
	fi

	printf -v snapshot_date '%(%Y%m%d)T' "${start_time}"
	snapshot_unixtime=$(get_unixtime_by_date "${snapshot_date}")

	while (( attempts++ < 40 )); do
		(( snapshot_unixtime -= 86400 ))
		# snapshots are created at 00:45
		(( approx_snapshot_time = snapshot_unixtime + 86400 + 2700 ))
		(( timestamp_difference = existing_timestamp - approx_snapshot_time ))

		if (( timestamp_difference < 0 )); then
			(( timestamp_difference = -1 * timestamp_difference ))
		fi
		printf -v snapshot_date '%(%Y%m%d)T' "${snapshot_unixtime}"

		timestamp_problem=""
		if (( timestamp_difference == 0 )); then
			timestamp_problem="is identical to"
		elif (( timestamp_difference < min_time_diff )); then
			timestamp_problem="is possibly identical to"
		elif (( approx_snapshot_time < existing_timestamp )); then
			timestamp_problem="is newer than"
		fi

		if [[ -n "${timestamp_problem}" ]]; then
			ewarn "Latest snapshot date: ${snapshot_date}"
			ewarn
			ewarn "Approximate snapshot timestamp: ${approx_snapshot_time}"
			ewarn "       Current local timestamp: ${existing_timestamp}"
			ewarn
			echo -e "The current local timestamp" \
				"${timestamp_problem} the" \
				"timestamp of the latest" \
				"snapshot. In order to force sync," \
				"use the --revert option or remove" \
				"the timestamp file located at" \
				"'${repo_location}/metadata/timestamp.x'." | fmt -w 70 | \
				while read -r line ; do
					ewarn "${line}"
				done
			break
		fi

		do_snapshot 0 "${snapshot_date}" && break
	done
}

# Use emerge and portageq from the same directory/prefix as the current script,
# so that we don't have to rely on PATH including the current EPREFIX.
emerge=$(PATH="${BASH_SOURCE[0]%/*}:${PATH}" type -P emerge)
[[ -n ${emerge} ]] || die "could not find 'emerge'; aborting"
portageq=$(PATH="${BASH_SOURCE[0]%/*}:${PATH}" type -P portageq)
[[ -n ${portageq} ]] || die "could not find 'portageq'; aborting"

eval "$("${portageq}" envvar -v DISTDIR EPREFIX FEATURES \
	FETCHCOMMAND GENTOO_MIRRORS \
	PORTAGE_BIN_PATH PORTAGE_CONFIGROOT PORTAGE_GPG_DIR \
	PORTAGE_NICENESS PORTAGE_REPOSITORIES PORTAGE_RSYNC_EXTRA_OPTS \
	PORTAGE_RSYNC_OPTS PORTAGE_TEMP_GPG_DIR PORTAGE_TMPDIR \
	PORTAGE_USERNAME PORTAGE_GRPNAME \
	USERLAND http_proxy https_proxy ftp_proxy)"
export http_proxy https_proxy ftp_proxy

source "${PORTAGE_BIN_PATH}"/isolated-functions.sh || exit 1

# The implementation of die() from isolated-functions.sh is over-engineered and
# unsuitable for standalone scripts. This one mimics gentoo-functions.
die() {
	case $? in
		0)
			local exitval=1
			;;
		*)
			local exitval=$?
	esac
	printf '%s: %s\n' "${0##*/}" "$*" >&2
	exit "${exitval}"
}

# Opportunistically use gentoo-functions for its implementations of einfo(),
# ewarn() and eerror(). As of late, these are better maintained.
functions_script="${EPREFIX}/lib/gentoo/functions.sh"
if [[ -f ${functions_script} ]]; then
	source "${functions_script}" || exit
fi

repo_name=gentoo
repo_location=$(__repo_attr "${repo_name}" location)
if [[ -z ${repo_location} ]]; then
	die "Repository '${repo_name}' not found"
fi
repo_sync_type=$(__repo_attr "${repo_name}" sync-type)

# If PORTAGE_NICENESS is overriden via the env then it will
# still pass through the portageq call and override properly.
if [[ -n "${PORTAGE_NICENESS}" ]]; then
	renice "${PORTAGE_NICENESS}" $$ > /dev/null
fi

declare -A opt
main "$@"
